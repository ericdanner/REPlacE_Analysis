}
View(centromere)
# Data preprocessing ------------------------------------------------------
## Column names to standard
chrlen$chrom <- chrlen[,which(colnames(chrlen) %in% chromosome.columns)]
chrlen$length <- chrlen[,which(colnames(chrlen) %in% length.columns)]
centromeres$chrom <- centromeres[,which(colnames(centromeres) %in% chromosome.columns)]
centromeres$start <- centromeres[,which(colnames(centromeres) %in% start.columns)]
centromeres$end <- centromeres[,which(colnames(centromeres) %in% end.columns)]
# Chromosome length data: filtering out all columns except chromosome name and length
chrlen <- select(chrlen, chrom, length)
# Centromeres data: filtering out all cols except chrom, start and end
centromeres <- select(centromeres, chrom, start, end)
## Variables to standard
# In case length or coordinate values contain extra characters:
chrlen$length <- as.integer(str_replace_all(chrlen$length, "\\D", ""))
centromeres$start <- as.integer(str_replace_all(centromeres$start, "\\D", ""))
centromeres$end <- as.integer(str_replace_all(centromeres$end, "\\D", ""))
# Chromosome names standartization
chrom.names.standard <- sapply(chrlen$chrom, lookup, table = chrom.names.lookuptable)
if(is.list(chrom.names.standard)){
stop("Ambiguous chromosome names, check the chromosome length data")
write("Ambiguous chromosome names, check the chromosome length data", file = report.file, append = TRUE)
}else{
chrlen$chrom <- chrom.names.standard
}
rm(chrom.names.standard)
# The same for centromeres
chrom.names.standard <- sapply(centromeres$chrom, lookup, table = chrom.names.lookuptable)
if(is.list(chrom.names.standard)){
stop("Ambiguous chromosome names, check the chromosome length data")
write("Ambiguous chromosome names, check the chromosome length data", file = report.file, append = TRUE)
}else{
centromeres$chrom <- chrom.names.standard
}
rm(chrom.names.standard)
## For centromeres file
# In case this file contains centromeres of different types
if("type" %in% colnames(centromeres)){
centromeres <- filter(centromeres, type == 'centromere')
}
if(nrow(centromeres) > 24){
centromeres <- centromeres %>% group_by(chrom) %>% summarise(start = min(start),
end = max(end))
}
centromeres$center <- (centromeres$start + centromeres$end)/2
# For plotting I won't need start and end coords, just the center coordinate
centromeres <- select(centromeres, chrom, center)
# Merging chrlen and centromeres tables to get rid of redundant tables
chrlen <- left_join(chrlen, centromeres, by = "chrom", copy = FALSE)
rm(centromeres)
# For sake of plotting in downstream code:
chrlen$relative.length <- chrlen$length/max(chrlen$length)
# Plot parameters specifying ----------------------------------------------
## Input Parameters
plot.height <- 1500
plot.width <- 1000
x.margin <- 50
y.margin <- 10
# Chromosomes rectangles thickness
thick <- 0
# Triangles parameters
tw <- 6
th <- 10
## Dependent Parameters
x.inner <- plot.width - x.margin
y.inner <- plot.height - y.margin
inner.width <- plot.width - 2*x.margin
inner.height <- plot.height - 2*y.margin
N <- nrow(chrlen)
spacing <- inner.height/(N-1)
chrlen$element.i <- seq(N)
# Plotting coordinates calculation ----------------------------------------
## Chromosomes coordinates
chrlen$AX <- x.margin
chrlen$AY <- y.inner - spacing*(chrlen$element.i - 1) - thick/2
chrlen$BX <- x.margin + inner.width*chrlen$relative.length
chrlen$BY <- y.inner - spacing*(chrlen$element.i - 1) + thick/2
## Centromeres coordinates
chrlen$center.relative <- chrlen$center/max(chrlen$length)
chrlen$center.Y <- chrlen$AY
chrlen$center.X <- x.margin + inner.width*chrlen$center.relative
chrlen$length.mbp <- chrlen$length / 1000000
## The mitochondrial DNA is not plotted
chrlen <- filter(chrlen, chrom != "chrM")
# length.mbp will be used as the text labels on the plot
chrlen$length.mbp <- round(chrlen$length.mbp, 0)
chrlen$length.mbp <- as.character(chrlen$length.mbp)
chrlen$length.mbp <- paste(chrlen$length.mbp, 'Mbp')
color_of_lines <- 'black'
# Read mapping import -----------------------------------------------------
lam.table <- bed
# lam.table <- read.table(file = paste(folder.with.sorted.bed, "/", bed.files[1], sep = ""),
#                         sep = '\t', header = FALSE, stringsAsFactors = FALSE)
#lam.table$sample <- unlist(str_split(bed.files[1], ".sorted.bed"))[1]
if(length(bed.files)>1){
for(i in seq(2,length(bed.files))){
lam.table.temp <- read.table(file = paste(folder.with.sorted.bed, "/", i, sep = ""),
sep = '\t', header = FALSE, stringsAsFactors = FALSE)
lam.table.temp$sample <- unlist(str_split(i, ".sorted.bed"))[1]
lam.table <- bind_rows(lam.table, lam.table.temp)
}
rm(i)
}
#colnames(lam.table) <- c("chrom", "start", "end", "read.id", "sample")
# Chromosome mappings can contain undefined chromosome scaffolds, filtering them out
if(any(str_detect(unique(lam.table$chrom), "_"))){
warning("Mappings contain the undefined chromosome scaffolds alignments, filtering them out.")
write("Mappings contain the undefined chromosome scaffolds alignments, filtering them out.",
file = report.file, append = TRUE)
n.observations.before <- nrow(lam.table)
lam.table %>% filter(!str_detect(chrom, "_")) -> lam.table
n.observations.after <- nrow(lam.table)
n.obs.filtered <- n.observations.before - n.observations.after
the.message <- paste(n.obs.filtered, " reads (", round(n.obs.filtered*100/n.observations.before,1)," %)",
" were filtered out on this step (out of ",
n.observations.before, " reads, ", n.observations.after, " reads left).", sep = "")
message(the.message)
write(the.message, file = report.file, append = TRUE)
rm(the.message)
lam.table %>% filter(!str_detect(chrom, "chrM")) -> lam.table
n.observations.after.chrM <- nrow(lam.table)
the.message <- paste("Number of reads filtered out due to mapping to the chrM: ",
n.observations.after - n.observations.after.chrM, " (",
round((n.observations.after - n.observations.after.chrM)*100/n.observations.after, 1),
" %).", sep = "")
message(the.message)
write(the.message, file = report.file, append = TRUE)
rm(the.message)
rm(n.observations.before, n.observations.after, n.observations.after.chrM, n.obs.filtered)
}
# Mappings plotting -------------------------------------------------------
lam.table <- left_join(lam.table, select(chrlen, chrom, AY, BY), by = 'chrom')
bed.files <- search_files(folder = folder.with.sorted.bed, file.or.pattern = ".sorted.bed")
bed <- data.frame()
for(i in bed.files){
filename <- paste0(folder.with.sorted.bed, "/", i)
bed.temp <- read.table(filename, sep = "\t", stringsAsFactors = FALSE, fill = TRUE)
bed.temp$filename <- i
bed <- bind_rows(bed, bed.temp)
}
bed.files <- bed %>% select(V1:V12, filename)
#
# bed.files <- read.table(paste0(folder.with.sorted.bed, "/N707_N505.sorted.bed"), stringsAsFactors = FALSE,
#                         fill = TRUE)
#
colnames(bed.files) <- c("chrom", "start", "end", "read.id", "quality", "strand", "flag", "cigar", "asterisk", "zero1", "zero2", "seq", "filename")
bed.files <- bed.files %>% filter(!str_detect(chrom, "_"))
# Read mapping import -----------------------------------------------------
lam.table <- bed.files
# Mappings plotting -------------------------------------------------------
lam.table <- left_join(lam.table, select(chrlen, chrom, AY, BY), by = 'chrom')
max_chr_len <- max(chrlen$length)
lam.table %>% mutate(rel.start = start/max_chr_len) %>%
mutate(rel.end = end/max_chr_len) -> lam.table
lam.table %>% mutate(AX = x.margin + inner.width*rel.start) %>%
mutate(BX = x.margin + inner.width*rel.end) -> lam.table
binwidth = 2
bins <- seq(0, inner.width + x.margin, binwidth)
if (bins[length(bins)] != inner.width + x.margin){
bins <- c(bins, inner.width + x.margin)
}
lam.table$binX <- .bincode(lam.table$AX, bins)
#lam.table$sample <- "bpA"
lam.table <- lam.table %>% filter(read.dir == "rev")
for(i in unique(lam.table$sample)){
lam.table.temp <- filter(lam.table, sample == i)
lam.table.temp %>% group_by(chrom, binX) %>% summarise(AY = nth(AY, 1), reads.count = n()) -> lam
lam$reads.count.log <- log10(lam$reads.count) + 1
lam$AX <- lam$binX * binwidth
barheight <- 5
lam$BY <- lam$AY + lam$reads.count.log * barheight
lam$BX <- lam$AX + binwidth
lamplot <- ggplot(data = chrlen)+
coord_cartesian(xlim = c(0, plot.width), ylim = c(0, plot.height))+
geom_segment(aes(x = AX, y = AY, xend = BX, yend = BY), alpha = 0.2, color = "black", size = 1)+
geom_segment(data = lam.table.temp,
aes(x = AX, y = AY, xend = BX, yend = BY),
alpha = 0.25, size = 1, color = 'red')+
geom_point(aes(x = center.X, y = center.Y), size = 2, shape = 21, fill = 'deeppink2')+
geom_text(aes(x = AX-35, y = AY+3, label = chrom), colour = "black")+
geom_text(aes(x = BX + 50, y = AY+3, label = length.mbp), size = 3, colour = "black")+
geom_segment(data = lam, aes(x = AX-1, y = AY+2.5, xend = AX-1, yend = BY+2.5),
colour = "blue", size = 1)+
theme_void()
ggsave(paste('htgts_', i,
format(Sys.time(), "%d%m%y_%H%M"),
'.pdf', sep = ''),
width = 15, height = 10,
device = "pdf",
plot = lamplot)
rm(lam.table.temp)
}
for(i in unique(lam.table$filename)){
lam.table.temp <- filter(lam.table, sample == i)
lam.table.temp %>% group_by(chrom, binX) %>% summarise(AY = nth(AY, 1), reads.count = n()) -> lam
lam$reads.count.log <- log10(lam$reads.count) + 1
lam$AX <- lam$binX * binwidth
barheight <- 5
lam$BY <- lam$AY + lam$reads.count.log * barheight
lam$BX <- lam$AX + binwidth
lamplot <- ggplot(data = chrlen)+
coord_cartesian(xlim = c(0, plot.width), ylim = c(0, plot.height))+
geom_segment(aes(x = AX, y = AY, xend = BX, yend = BY), alpha = 0.2, color = "black", size = 1)+
geom_segment(data = lam.table.temp,
aes(x = AX, y = AY, xend = BX, yend = BY),
alpha = 0.25, size = 1, color = 'red')+
geom_point(aes(x = center.X, y = center.Y), size = 2, shape = 21, fill = 'deeppink2')+
geom_text(aes(x = AX-35, y = AY+3, label = chrom), colour = "black")+
geom_text(aes(x = BX + 50, y = AY+3, label = length.mbp), size = 3, colour = "black")+
geom_segment(data = lam, aes(x = AX-1, y = AY+2.5, xend = AX-1, yend = BY+2.5),
colour = "blue", size = 1)+
theme_void()
ggsave(paste('htgts_', i,
format(Sys.time(), "%d%m%y_%H%M"),
'.pdf', sep = ''),
width = 15, height = 10,
device = "pdf",
plot = lamplot)
rm(lam.table.temp)
}
unique(lam.table$filename)
lam.table.temp <- filter(lam.table, sample == i)
for(i in unique(lam.table$filename)){
lam.table.temp <- filter(lam.table, filename == i)
lam.table.temp %>% group_by(chrom, binX) %>% summarise(AY = nth(AY, 1), reads.count = n()) -> lam
lam$reads.count.log <- log10(lam$reads.count + 1)
lam$AX <- lam$binX * binwidth
barheight <- 5
lam$BY <- lam$AY + lam$reads.count.log * barheight
lam$BX <- lam$AX + binwidth
lamplot <- ggplot(data = chrlen)+
coord_cartesian(xlim = c(0, plot.width), ylim = c(0, plot.height))+
geom_segment(aes(x = AX, y = AY, xend = BX, yend = BY), alpha = 0.2, color = "black", size = 1)+
geom_segment(data = lam.table.temp,
aes(x = AX, y = AY, xend = BX, yend = BY),
alpha = 0.25, size = 1, color = 'red')+
geom_point(aes(x = center.X, y = center.Y), size = 2, shape = 21, fill = 'deeppink2')+
geom_text(aes(x = AX-35, y = AY+3, label = chrom), colour = "black")+
geom_text(aes(x = BX + 50, y = AY+3, label = length.mbp), size = 3, colour = "black")+
geom_segment(data = lam, aes(x = AX-1, y = AY+2.5, xend = AX-1, yend = BY+2.5),
colour = "blue", size = 1)+
theme_void()
ggsave(paste('htgts_', i,
format(Sys.time(), "%d%m%y_%H%M"),
'.pdf', sep = ''),
width = 15, height = 10,
device = "pdf",
plot = lamplot)
rm(lam.table.temp)
}
View(lam)
View(lam)
max_chr_len/plot.width
for(i in unique(lam.table$filename)){
lam.table.temp <- filter(lam.table, filename == i)
lam.table.temp %>% group_by(chrom, binX) %>% summarise(AY = nth(AY, 1), reads.count = n()) -> lam
lam$reads.count.log <- log2(lam$reads.count + 1)
lam$AX <- lam$binX * binwidth
barheight <- 5
lam$BY <- lam$AY + lam$reads.count.log * barheight
lam$BX <- lam$AX + binwidth
lamplot <- ggplot(data = chrlen)+
coord_cartesian(xlim = c(0, plot.width), ylim = c(0, plot.height))+
geom_segment(aes(x = AX, y = AY, xend = BX, yend = BY), alpha = 0.2, color = "black", size = 1)+
geom_segment(data = lam.table.temp,
aes(x = AX, y = AY, xend = BX, yend = BY),
alpha = 0.25, size = 1, color = 'red')+
geom_point(aes(x = center.X, y = center.Y), size = 2, shape = 21, fill = 'deeppink2')+
geom_text(aes(x = AX-35, y = AY+3, label = chrom), colour = "black")+
geom_text(aes(x = BX + 50, y = AY+3, label = length.mbp), size = 3, colour = "black")+
geom_segment(data = lam, aes(x = AX-1, y = AY+2.5, xend = AX-1, yend = BY+2.5),
colour = "blue", size = 1)+
theme_void()
ggsave(paste('htgts_', i,
format(Sys.time(), "%d%m%y_%H%M"),
'.pdf', sep = ''),
width = 15, height = 10,
device = "pdf",
plot = lamplot)
rm(lam.table.temp)
}
for(i in unique(lam.table$filename)){
lam.table.temp <- filter(lam.table, filename == i)
lam.table.temp %>% group_by(chrom, binX) %>% summarise(AY = nth(AY, 1), reads.count = n()) -> lam
lam$reads.count.log <- log2(lam$reads.count + 1)
lam$AX <- lam$binX * binwidth
barheight <- 5
#lam$BY <- lam$AY + lam$reads.count.log * barheight
lam$BY <- lam$AY + lam$reads.count/20000
lam$BX <- lam$AX + binwidth
lamplot <- ggplot(data = chrlen)+
coord_cartesian(xlim = c(0, plot.width), ylim = c(0, plot.height))+
geom_segment(aes(x = AX, y = AY, xend = BX, yend = BY), alpha = 0.2, color = "black", size = 1)+
geom_segment(data = lam.table.temp,
aes(x = AX, y = AY, xend = BX, yend = BY),
alpha = 0.25, size = 1, color = 'red')+
geom_point(aes(x = center.X, y = center.Y), size = 2, shape = 21, fill = 'deeppink2')+
geom_text(aes(x = AX-35, y = AY+3, label = chrom), colour = "black")+
geom_text(aes(x = BX + 50, y = AY+3, label = length.mbp), size = 3, colour = "black")+
geom_segment(data = lam, aes(x = AX-1, y = AY+2.5, xend = AX-1, yend = BY+2.5),
colour = "blue", size = 1)+
theme_void()
ggsave(paste('htgts_', i,
format(Sys.time(), "%d%m%y_%H%M"),
'.pdf', sep = ''),
width = 15, height = 10,
device = "pdf",
plot = lamplot)
rm(lam.table.temp)
}
#lam$BY <- lam$AY + lam$reads.count.log * barheight
lam$BY <- lam$AY + lam$reads.count/2000
for(i in unique(lam.table$filename)){
lam.table.temp <- filter(lam.table, filename == i)
lam.table.temp %>% group_by(chrom, binX) %>% summarise(AY = nth(AY, 1), reads.count = n()) -> lam
lam$reads.count.log <- log2(lam$reads.count + 1)
lam$AX <- lam$binX * binwidth
barheight <- 5
#lam$BY <- lam$AY + lam$reads.count.log * barheight
lam$BY <- lam$AY + lam$reads.count/2000
lam$BX <- lam$AX + binwidth
lamplot <- ggplot(data = chrlen)+
coord_cartesian(xlim = c(0, plot.width), ylim = c(0, plot.height))+
geom_segment(aes(x = AX, y = AY, xend = BX, yend = BY), alpha = 0.2, color = "black", size = 1)+
geom_segment(data = lam.table.temp,
aes(x = AX, y = AY, xend = BX, yend = BY),
alpha = 0.25, size = 1, color = 'red')+
geom_point(aes(x = center.X, y = center.Y), size = 2, shape = 21, fill = 'deeppink2')+
geom_text(aes(x = AX-35, y = AY+3, label = chrom), colour = "black")+
geom_text(aes(x = BX + 50, y = AY+3, label = length.mbp), size = 3, colour = "black")+
geom_segment(data = lam, aes(x = AX-1, y = AY+2.5, xend = AX-1, yend = BY+2.5),
colour = "blue", size = 1)+
theme_void()
ggsave(paste('htgts_', i,
format(Sys.time(), "%d%m%y_%H%M"),
'.pdf', sep = ''),
width = 15, height = 10,
device = "pdf",
plot = lamplot)
rm(lam.table.temp)
}
View(lam.table)
for(i in unique(lam.table$filename)){
lam.table.temp <- filter(lam.table, filename == i & quality >= 100)
lam.table.temp %>% group_by(chrom, binX) %>% summarise(AY = nth(AY, 1), reads.count = n()) -> lam
lam$reads.count.log <- log2(lam$reads.count + 1)
lam$AX <- lam$binX * binwidth
barheight <- 5
#lam$BY <- lam$AY + lam$reads.count.log * barheight
lam$BY <- lam$AY + lam$reads.count/2000
lam$BX <- lam$AX + binwidth
lamplot <- ggplot(data = chrlen)+
coord_cartesian(xlim = c(0, plot.width), ylim = c(0, plot.height))+
geom_segment(aes(x = AX, y = AY, xend = BX, yend = BY), alpha = 0.2, color = "black", size = 1)+
geom_segment(data = lam.table.temp,
aes(x = AX, y = AY, xend = BX, yend = BY),
alpha = 0.25, size = 1, color = 'red')+
geom_point(aes(x = center.X, y = center.Y), size = 2, shape = 21, fill = 'deeppink2')+
geom_text(aes(x = AX-35, y = AY+3, label = chrom), colour = "black")+
geom_text(aes(x = BX + 50, y = AY+3, label = length.mbp), size = 3, colour = "black")+
geom_segment(data = lam, aes(x = AX-1, y = AY+2.5, xend = AX-1, yend = BY+2.5),
colour = "blue", size = 1)+
theme_void()
ggsave(paste('htgts_', i,
format(Sys.time(), "%d%m%y_%H%M"),
'.pdf', sep = ''),
width = 15, height = 10,
device = "pdf",
plot = lamplot)
rm(lam.table.temp)
}
#lam$BY <- lam$AY + lam$reads.count/2000
lam$BX <- lam$AX + binwidth
for(i in unique(lam.table$filename)){
lam.table.temp <- filter(lam.table, filename == i & quality >= 100)
lam.table.temp %>% group_by(chrom, binX) %>% summarise(AY = nth(AY, 1), reads.count = n()) -> lam
lam$reads.count.log <- log2(lam$reads.count + 1)
lam$AX <- lam$binX * binwidth
barheight <- 5
lam$BY <- lam$AY + lam$reads.count.log * barheight
#lam$BY <- lam$AY + lam$reads.count/2000
lam$BX <- lam$AX + binwidth
lamplot <- ggplot(data = chrlen)+
coord_cartesian(xlim = c(0, plot.width), ylim = c(0, plot.height))+
geom_segment(aes(x = AX, y = AY, xend = BX, yend = BY), alpha = 0.2, color = "black", size = 1)+
geom_segment(data = lam.table.temp,
aes(x = AX, y = AY, xend = BX, yend = BY),
alpha = 0.25, size = 1, color = 'red')+
geom_point(aes(x = center.X, y = center.Y), size = 2, shape = 21, fill = 'deeppink2')+
geom_text(aes(x = AX-35, y = AY+3, label = chrom), colour = "black")+
geom_text(aes(x = BX + 50, y = AY+3, label = length.mbp), size = 3, colour = "black")+
geom_segment(data = lam, aes(x = AX-1, y = AY+2.5, xend = AX-1, yend = BY+2.5),
colour = "blue", size = 1)+
theme_void()
ggsave(paste('htgts_', i,
format(Sys.time(), "%d%m%y_%H%M"),
'.pdf', sep = ''),
width = 15, height = 10,
device = "pdf",
plot = lamplot)
rm(lam.table.temp)
}
for(i in unique(lam.table$filename)){
lam.table.temp <- filter(lam.table, filename == i & quality >= 100)
lam.table.temp %>% group_by(chrom, binX) %>% summarise(AY = nth(AY, 1), reads.count = n()) -> lam
lam$reads.count.log <- log10(lam$reads.count + 1)
lam$AX <- lam$binX * binwidth
barheight <- 5
lam$BY <- lam$AY + lam$reads.count.log * barheight
#lam$BY <- lam$AY + lam$reads.count/2000
lam$BX <- lam$AX + binwidth
lamplot <- ggplot(data = chrlen)+
coord_cartesian(xlim = c(0, plot.width), ylim = c(0, plot.height))+
geom_segment(aes(x = AX, y = AY, xend = BX, yend = BY), alpha = 0.2, color = "black", size = 1)+
geom_segment(data = lam.table.temp,
aes(x = AX, y = AY, xend = BX, yend = BY),
alpha = 0.25, size = 1, color = 'red')+
geom_point(aes(x = center.X, y = center.Y), size = 2, shape = 21, fill = 'deeppink2')+
geom_text(aes(x = AX-35, y = AY+3, label = chrom), colour = "black")+
geom_text(aes(x = BX + 50, y = AY+3, label = length.mbp), size = 3, colour = "black")+
geom_segment(data = lam, aes(x = AX-1, y = AY+2.5, xend = AX-1, yend = BY+2.5),
colour = "blue", size = 1)+
theme_void()
ggsave(paste('htgts_', i,
format(Sys.time(), "%d%m%y_%H%M"),
'.pdf', sep = ''),
width = 15, height = 10,
device = "pdf",
plot = lamplot)
rm(lam.table.temp)
}
unique(lam.table$filename)[1]
lam.table %>% filter(filename == unique(lam.table$filename)[1] & quality >= 100) %>% nrow()
lam.table %>% filter(filename == unique(lam.table$filename)[1]) %>% nrow()
lam.table$chrom %>% unique()
bed.files$chrom %>% unique()
bed$V1 %>% unique()
bed.files <- search_files(folder = folder.with.sorted.bed, file.or.pattern = ".sorted.bed")
bed <- data.frame()
for(i in bed.files){
filename <- paste0(folder.with.sorted.bed, "/", i)
bed.temp <- read.table(filename, sep = "\t", stringsAsFactors = FALSE, fill = TRUE)
bed.temp$filename <- i
bed <- bind_rows(bed, bed.temp)
}
bed.files <- bed %>% select(V1:V12, filename)
#
# bed.files <- read.table(paste0(folder.with.sorted.bed, "/N707_N505.sorted.bed"), stringsAsFactors = FALSE,
#                         fill = TRUE)
#
colnames(bed.files) <- c("chrom", "start", "end", "read.id", "quality", "strand", "flag", "cigar", "asterisk", "zero1", "zero2", "seq", "filename")
bed.files <- bed.files %>% filter(!str_detect(chrom, "_") | chrom == "pE038_MC")
bed.files %>% filter(chrom == "pE038_MC") %>% nrow()
bed.files %>% filter(chrom == "pE038_MC" & filename == unique(filename)[1]) %>% nrow()
View(bed.files)
# Plot parameters specifying ----------------------------------------------
## Input Parameters
plot.height <- 1500
plot.width <- 1000
x.margin <- 50
y.margin <- 10
# Chromosomes rectangles thickness
thick <- 0
# Triangles parameters
tw <- 6
th <- 10
## Dependent Parameters
x.inner <- plot.width - x.margin
y.inner <- plot.height - y.margin
inner.width <- plot.width - 2*x.margin
inner.height <- plot.height - 2*y.margin
N <- nrow(chrlen)
spacing <- inner.height/(N-1)
chrlen$element.i <- seq(N)
# Plotting coordinates calculation ----------------------------------------
## Chromosomes coordinates
chrlen$AX <- x.margin
chrlen$AY <- y.inner - spacing*(chrlen$element.i - 1) - thick/2
chrlen$BX <- x.margin + inner.width*chrlen$relative.length
chrlen$BY <- y.inner - spacing*(chrlen$element.i - 1) + thick/2
## Centromeres coordinates
chrlen$center.relative <- chrlen$center/max(chrlen$length)
chrlen$center.Y <- chrlen$AY
chrlen$center.X <- x.margin + inner.width*chrlen$center.relative
chrlen$length.mbp <- chrlen$length / 1000000
## The mitochondrial DNA is not plotted
chrlen <- filter(chrlen, chrom != "chrM")
# length.mbp will be used as the text labels on the plot
chrlen$length.mbp <- round(chrlen$length.mbp, 0)
chrlen$length.mbp <- as.character(chrlen$length.mbp)
chrlen$length.mbp <- paste(chrlen$length.mbp, 'Mbp')
color_of_lines <- 'black'
# Read mapping import -----------------------------------------------------
lam.table <- bed.files
# Mappings plotting -------------------------------------------------------
lam.table <- left_join(lam.table, select(chrlen, chrom, AY, BY), by = 'chrom')
max_chr_len <- max(chrlen$length)
lam.table %>% mutate(rel.start = start/max_chr_len) %>%
mutate(rel.end = end/max_chr_len) -> lam.table
lam.table %>% mutate(AX = x.margin + inner.width*rel.start) %>%
mutate(BX = x.margin + inner.width*rel.end) -> lam.table
binwidth = 2
bins <- seq(0, inner.width + x.margin, binwidth)
if (bins[length(bins)] != inner.width + x.margin){
bins <- c(bins, inner.width + x.margin)
}
lam.table$binX <- .bincode(lam.table$AX, bins)
lam.table.temp <- filter(lam.table, filename == i & quality >= 100)
lam.table.temp %>% group_by(chrom, binX) %>% summarise(AY = nth(AY, 1), reads.count = n()) -> lam
View(lam.table.temp)
View(lam)
